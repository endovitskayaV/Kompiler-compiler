class Test{}
  class class1{
      fun funTest():Unit{
         var wrong: Double=9+7.7
         wrong=8
         e=true
         var variable:Int=1+3-0
      }
      }
  class Test{
  fun fun4() : Boolean{
                c=9
                a=0
                c=9
                a=e*7
                return 6
             }
             }

  fun fun1():Unit{
              var wrong: Boolean = true
                var wrong: Boolean = false
                val i:Int=5.6
             return true
             }

  fun fun1() :Int
      {
          return 2
      }
      fun fun1() : Double
      {
          return 5.7
      }

      fun fun1() :Boolean
      {
          return true
      }

      fun fun1(s:Int) : Boolean
      {

          return true
      }

      fun fun1(A:Int):Int{
          return 1
      }

      fun Test():Unit{
       var a: Int=9;
              while (a!=23){}

              while(a-89){
              b=6-5
              }

  do{a=12}
  while (true)
  for (i in Array<Int>(4, {1})) {

              }

              for (i in true) {
              c=0
                          }

        if (true){
        a=1}

        if (a){
        b=1}
        else{
        a=1}

      }
fun finQ():Unit{
var a:Int=9
var b:Int=5
    a=b+funTest(we)
    a=b-fun6()

    var a1:Double=9.9
    var b1:Double=5.1
        a=b1*fun6()
        a1=b1-fun7()
        a1=b1-fun7(a)
        a1=b1-fun8(a)


     var arr: Array<Boolean> = Array<Boolean>(9, {1})
     var arr1: Array<Int> = Array<Double>(9, {1})
      arr3[4]=1
      arr[2]=1.5
      arr[3.4]=true
    }
fun fun6():Double{ return noSuchFun(q)}
fun fun6(a:Boolean):Double{ return fun7()}
fun fun7():Int{ return g }
fun fun8(param:Int):Int{
  fun7(4, 5, true)
    fun8 (fun7(4))
     var arr: Array<Boolean> = Array<Boolean>(9, {1})
      arr[3]=true
    return arr[3]
    }